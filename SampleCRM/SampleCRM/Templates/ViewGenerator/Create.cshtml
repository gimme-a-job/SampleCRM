@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.ComponentModel
@using System.Collections.Generic
@using System.Linq
@using System.Reflection
@@model @Model.ViewDataTypeName

@{
    string displayName = IntrospectionExtensions.GetTypeInfo(Model.ModelMetadata.ModelType).GetCustomAttributes(typeof(DisplayNameAttribute), false)[0].DisplayName;
    string title = displayName + "作成";
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@title";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h1>@title</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@title</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<hr />
@:<div class="row">
    @:<div class="col-md-4">
        @:<form asp-action="@Model.ViewName">
            @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if (property.Scaffold && !property.IsReadOnly)
            {
                if (property.PropertyName == "UpdateUser" || property.PropertyName == "UpdateDate")
                {
                    continue;
                }

                if (property.IsForeignKey)
                {
                    continue;
                }

                /*if (property.PropertyInfo.PropertyType == typeof(List<string>))
                {
                    <p>StrList</p>
                    foreach (var item in property)
                    {
                        <p>@item / </p>
                    }
                    continue;
                }*/

                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                if (isCheckbox)
                {
            @:<div class="form-group form-check">
                @:<label class="form-check-label">
                @:<input class="form-check-input" asp-for="@property.PropertyName" />@@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                @:</label>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label fw-bold"></label>
                @:<select asp-for="@property.PropertyName" class="form-control"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else if (property.IsMultilineText)
                {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label fw-bold"></label>
                @:<textarea asp-for="@property.PropertyName" class="form-control"></textarea>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
                else if (property.IsPrimaryKey)
                {
            @:<!-- 主キーに任意の数値を使う場合はここのコメントアウトを外す。 -->
            @:<!--<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label fw-bold"></label>
                @:<input asp-for="@property.PropertyName" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>-->
                }
                else
                {
            @:<div class="form-group">
                @:<label asp-for="@property.PropertyName" class="control-label fw-bold"></label>
                @:<input asp-for="@property.PropertyName" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
        }
        }
            <div class="form-group">
                <input type="submit" value="作成" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">@displayName<span>一覧へ戻る</span></a>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
